<% layout('layout') -%>

<div id="sidebar">
	<div class="sidebar-toggler visible-xs">
		<i class="ion-navicon"></i>
	</div>
	
	<h3>Order #<%= order.orderNumber %></h3>
	<ul class="menu tabs">
		<li>
			<a href="#" class="panel-switch active">
				<i class="fa fa-folder-open-o"></i>
				Details
			</a>
		</li>
		<li>
			<a href="#" class="panel-switch">
				<i class="fa fa-shopping-cart"></i>
				Products
			</a>
		</li>
		<li>
			<a href="/orders/<%= order._id %>/invoice">
				<i class="fa fa-credit-card"></i>
				Invoice
			</a>
		</li>
		<li>
			<a href="/orders/<%= order._id %>/slip">
				<i class="fa fa-file-text-o"></i>
				Packing  Slip
			</a>
		</li>
		<div style="margin-top: 50px"></div>
		<% if(order.status === 'processing' || order.status === 'shipped') { %>
		<% if(order.status != 'shipped') { %>	
		<li>
			<a href="/orders/<%= order._id %>/ship">
				<i class="fa fa-truck"></i>
				<span style="color: #337ab7">Ship Order</span>
			</a>
		</li>
		<% }%>
		<li>
			<a href="/orders/<%= order._id %>/complete">
				<i class="fa fa-check"></i>
				<span style="color: green">Complete Order</span>
			</a>
		</li>
		<li>
			<a data-toggle="modal" data-target="#confirm-modal" href="">
				<i class="fa fa-times"></i>
				<span style="color: red">Cancel Order</span>
			</a>
		</li>
		<% } %>
	</ul>
</div>

<div id="panel" class="panel profile">

	<h3>
		Order Details
	</h3>
	<div class="status"><div class='color green'></div></div>

	<form id="edit-order" class="form-horizontal" method="post" action="#" role="form" data-toggle="validator">
	  	<div class="form-group orderform">
			<label>Order Number</label>
			<input type="hidden" name="_method" value="PUT"/>
			<input type="text" class="form-control" name="orderNumber" value="<%= order.orderNumber %>"/>
		</div>
		<div class="form-group orderform">
			<label>Customer</label>
			<input type="text" class="form-control" name="customer"  style="width: 100% !important" value="<%= order.customer %>"/>
		</div>
		<div class="form-group orderform">
		    <label class="control-label">Shipping</label>
		    <select class="form-control" name="shipping" />
		      	<option value="pickup">Pick-up</option>
		      	<option value="delivery">Delivery</option>
		    </select>
	  	</div>
	  	<div class="form-group orderform">
			<label>Discount ( % )</label>
			<input type="text" class="form-control" name="discount" value="<%= order.discount %>"/>
		</div>
		<div class="form-group orderform">
		    <label>Extra notes</label>
		    	<textarea class="form-control" rows="4" name="notes" id='notes'><%= order.notes %></textarea>
	  	</div>
		<div class="form-group action orderform">
			<input type="submit" class="btn btn-success" value="Update Order" />
		</div>
	</form>

</div>

<a name="cart"></a>
<div id="panel" class="panel cart" style="padding-bottom: 200px; display:none">
	<h3 style="margin: 0 0 20px 0; font-size: 18px">Cart</h3>
	<div id="cart-container" >

		<div class="row cart-item" style="margin-bottom: 20px" id="cart-item">
			<div class="form-group">
			    <div class="col-sm-6">
			      	<input type="text" class="form-control" placeholder="Product name" name="productName" />
			    </div>
			    <div class="col-sm-2 col-md-2">
			      	<input type="text" class="form-control" placeholder="Qty" name="productQty" />
			    </div>
		  	</div>
		  	<div>
				<div class='col-sm-2'  style="margin-top: -18px; padding-left: 2px;font-size: 28px">
					<i class="ion-plus-circled"  id="add-item"></i>
				</div>
			</div>
		</div>  	
	

		
		<div class="headers clearfix">
			<div class="row col-sm-8 ">
				<div class="col-xs-7">Product</div>
				<div class="col-xs-1">Quantity</div>
				<div class="col-xs-1 pull-right text-right">Amount</div>
			</div>
		</div>
		
		<div class="row col-sm-8 total-item" style="display:none">
			<div class="item">
				<i class="ion-close-circled"  id="remove-item" style="float: left; margin: 3px 0 0 5px"></i>
				<div class="col-xs-7 desc">
					 
				</div>
				<div class="col-xs-1 qty">
					0
				</div>
				<div class="col-xs-1 amount pull-right text-right">
					0
				</div>
			</div>
		</div>	

		<% products.forEach(function(p) { %>
			<% var matchedProduct = order.cart.filter( (x) => x.name === p.name)[0] %>
			<div class="row col-sm-8 total-item" style="display">
				<div class="item">
					<i class="ion-close-circled"  id="remove-item" style="float: left; margin: 3px 0 0 5px"></i>
					<div class="col-xs-7 desc"><%= p.name %></div>
					<div class="col-xs-1 qty"><%= matchedProduct.quantity %></div>
					<div class="col-xs-1 amount pull-right text-right">$<%= (+products.filter( (x) => matchedProduct.name === x.name)[0].price * +matchedProduct.quantity).toFixed(2) %></div>
				</div>
			</div>	
        <% }); %>
		

		<div class="row col-sm-8 total text-right" id='totals' style="border-top: 2px solid #EBECEE; padding: 20px 0 20px 0; margin-left: 5px; margin-top: 20px">
			<div class="field">
				Subtotal <span class="count-span" id='subtotal'>$0.00</span>
			</div>
			<div class="field">
				Shipping <span class="count-span" id='shipping'>$<%= order.shipping === 'pickup' ? '0.00' : '50.00' %></span>
			</div>
			<div class="field">
				Discount <span class="count-span" id='discount'><%= order.discount.toFixed(2)%>%</span>
			</div>
			<div class="field grand-total">
				Total <span class="count-span" id="total">$0.00</span>
			</div>
		</div>

	</div>

	
</div>

<div class="modal fade" id="confirm-modal" tabindex="-1" role="dialog">
  	<div class="modal-dialog">
	    <div class="modal-content">
	    	<form method="get" action="/orders/<%= order._id %>/cancel" role="form">
		      	<div class="modal-header">
		        	<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		        	<h4 class="modal-title" id="myModalLabel">
		        		Are you sure you want to cancel this Order?
		        	</h4>
		      	</div>
		      	<div class="modal-body">
					If cancelled, order will go to order history
		      	</div>
		      	<div class="modal-footer">
			        <button type="button" class="btn btn-default" data-dismiss="modal">Back</button>
			        <button type="submit" class="btn btn-danger">Yes, cancel</button>
		      	</div>
		    </form>
	    </div>
  	</div>
</div>

<script type="text/javascript">

	var products, opts1, opts2;
	
	function getPrice(prodName) {
		return +products.filter( (p) => p.name === prodName)[0].price
	}

	function updateTotals() {
		var subtotal = $(".item").map(function() { return +$(this).find('.amount').html().substring(1) }).get().reduce( (a, b) => a + b);
		var discount = $('#discount').html()
		var shipping = $('#shipping').html()
		var total = (subtotal - subtotal * (+discount.substring(0, discount.length-1)/100)) + +shipping.substring(1)

		$('#subtotal').html("$" + subtotal.toFixed(2))
		$('#total').html("$" + total.toFixed(2))
	}


	//check if product in stock
	function isInStock(name, qty) {

		//fields should not be empty
		if(!name || !qty) return

		return new Promise(function(resolve, reject) {
			$.ajax({
				url: '/products/check',
				type: 'POST',
				contentType: 'application/json; charset=UTF-8',
				data: JSON.stringify({name: name, qty: qty}),
				dataType: 'json',
		        timeout: 5000,
		        success: (data) => {
		        	resolve(data.stock)
		        },
		        error: function() {
		        	console.log('error')
		        	reject('errror !')
		        }
			})
		})
	}


	$( document ).ready(function() {

		$("body").attr('id', "account")
		$('select').val('<%= order.shipping %>')

		//update cart totals on load	
		updateTotals()
		
		//get products - need this for fetching prices - should be refactored later (order cart object should store prices as well)
		$.ajax({
			url: '/products',
			contentType: 'application/json; charset=UTF-8',
			dataType: 'json',
	        timeout: 5000,
	        success: (data) => {
	        	products = data
	        }
		})

		//options for autocomplete 
		opts1 = {
			url: '../customers',
			getValue: 'name',
			ajaxSettings: {
				url: '/customers',
				type: 'GET',
				contentType: 'application/json; charset=UTF-8',
				dataType: 'json',
			},
			list: {
				match: {
					enabled: true
				}
			}
		}
		opts2 = {
			url: '../products',
			getValue: 'name',
			ajaxSettings: {
				url: '/products',
				type: 'GET',
				contentType: 'application/json; charset=UTF-8',
				dataType: 'json',
			},
			list: {
				match: {
					enabled: true
				}
			}
		}

		// ajax autocomplete for Customer and Product fields
		$("input[name='customer']").easyAutocomplete(opts1);
		$("input[name='productName']").easyAutocomplete(opts2);

		//validate form
		$('#edit-order').formValidation({
	        err: {
	            container: 'tooltip'
	        },
	        fields: {
	            orderNumber: {
	                validators: {
	                    notEmpty: {
	                        message: 'Order number is required and cannot be empty'
	                    },
	                    numeric: {
	                        message: 'Should contain only numerics'
	                    }
	                }
	            },
	            customer: {
	                validators: {
	                    notEmpty: {
	                        message: 'Customer is required and cannot be empty'
	                    }
	                }
	            },
	            discount: {
	                validators: {
	                    notEmpty: {
	                        message: 'Discount is required and cannot be empty'
	                    },
	                    numeric: {
	                        message: 'Should contain only numerics'
	                    },
	                    between: {
	                    	min: 0,
	                    	max: 100,
	                    	message: 'Should be between 0 and 100'
	                    }
	                }
	            }
	        }
	    }).on('success.form.fv', function(e) {
            // Prevent form submission
            e.preventDefault();
        });

        // place order
		$('#edit-order').submit(function(e) {

			$(this).formValidation('validate')

			var $form = $(e.target);
			fv = $form.data('formValidation');
			var cartIsEmpty = $('div.item:not(:first)').length == 0

			e.preventDefault()
			e.stopImmediatePropagation()



			if( !fv.isValid() || cartIsEmpty) {
				Messenger().post({
				  	message: 'Either cart is empty or some data is invalid',
				  	type: 'error',
				  	showCloseButton: true
				});

				return false
			}	

			console.log("form axaj update")
			console.log($("#create-order input[name='orderNumber']").val())

			updateTotals()
			// get the cart (removing the firsm item because its an empty blueprint of cart item)
			var cart = $('.item').map( function() { 
				return {name: $(this).find('.desc').html() , quantity: +$(this).find('.qty').html()} 
			}).get().splice(1)	

			var formData = {
				orderNumber : $("#edit-order input[name='orderNumber']").val(),
	            customer : $("#edit-order input[name='customer']").val(),
	            shipping: $('#edit-order').find('select').val(),
	            discount : +$("#edit-order input[name='discount']").val(),
	            notes: $("#edit-order #notes").val(),
	            cart: cart,
	            total: +$('#total').html().substring(1)
		    }

		    console.log(formData)

			$.ajax({
				url: '/orders/<%= order._id %>/edit',
				type: 'PUT',
				contentType: 'application/json; charset=UTF-8',
				dataType: 'json',
				data: JSON.stringify(formData),
		        timeout: 5000,
		        complete: () => console.log("complete !"),
		        success: (data) => {
					Messenger().post("Order has been updated!");
					$(this).formValidation('destroy')
		        },
		        error: (XMLHttpRequest, textStatus, errorThrown) => {
		        	console.log(XMLHttpRequest.responseText) 
		        	Messenger().post({
					  	message: 'Sorry, there was problem with placing Order.',
					  	type: 'error',
					  	showCloseButton: true
					});
		        }
			})
		}) 


		// Add item to cart
		$('#add-item').click( (e) => {

			//get all inputs
			var prodName = $("input[name='productName']").val()
			var qty = $("input[name='productQty']").val()
			var items = $('.item').filter( function() { return $(this).find('.desc').html() === prodName } )
			var item;
			var summedQty;
			
			//input qty + qty of the product which is in cart already
			var potentialProdInStock = items[0]

			console.log(typeof prodName,typeof qty, potentialProdInStock)

			//if we have same product in cart - get its price and sum with input
			potentialProdInStock ? summedQty = +qty + (+$(potentialProdInStock).find('.qty').html()) : summedQty = +qty

			var inStock = isInStock(prodName, summedQty)

			//product and quantity should not be empty
			if(!prodName || !qty ) {
				Messenger().post({
					  	message: 'Product and quantity field should not be empty!',
					  	type: 'error',
					  	showCloseButton: true
					});
				return;
			}

			inStock.then(function(stock) {
			if(!stock) {
				Messenger().post({
				  	message: 'Not enough items in stock !',
				  	type: 'error',
				  	showCloseButton: true
				});
				e.preventDefault()
				e.stopImmediatePropagation()
				return

			} else { 

				//check if this item is in subtotal already
				if(items.length == 1) {

					item = items[0]

					$(item).find('.qty').html(+$(item).find('.qty').html() + (+qty))
					$(item).find('.amount').html("$" + (getPrice(prodName)*(+$(item).find('.qty').html())).toFixed(2))
				// this product is not in subtotal - add a new one	
				} else {

					//display and insert
					item = $('.total-item').last().clone()
					item.show()
					item.insertAfter('.total-item:last')

					// update cloned item div
					item.find('div.desc').html(prodName)
					item.find('div.qty').html(qty)
					item.find('div.amount').html("$" + (getPrice(prodName)*(+qty)).toFixed(2))
				}

			}
		}, function(err) {
				console.log(err)
		})

		//clear the inputs and focus 
		$('#cart-item :input').val('')
		$("input[name='productName']").focus()

		//update totals
		updateTotals()

	})

	//remove the item from cart
	$(document).on('click', '#remove-item', (e) => {
		var item = $(event.target).closest('.total-item')
		item.remove();
		updateTotals()
	})

	//update shipping cost 
	$("select[name='shipping']").change( (e) => {
		var method = $("select[name='shipping']").val()
		var cartField = $('#shipping')

		method === 'delivery' ? cartField.html("$50.00") : cartField.html("$0.00")
		updateTotals()
	})

	//update discount
	$("input[name='discount']").change( (e) => {
		var discount = $("input[name='discount']").val()

		$('#discount').html(discount + '%')

		updateTotals()
	})

	//tab switching
	var $links = $(".menu .panel-switch");
	var $panels = $(".panel");

	$links.click(function (e) {
	// e.preventDefault();
		var index = $links.index(this);

		$links.removeClass("active");
		$links.eq(index).addClass("active");

		$panels.hide();
		$panels.eq(index).show();
		})

	})	  	
</script>
<style type="text/css">
    .count-span {
        display: inline-block;
        margin-left: 20px;
        min-width: 85px;
        color: #84868A;
        font-size: 15px;
    }

    #total {
        color: #20A720;
        font-size: 22px;
        font-weight: 600;
    }

    .orderform {
        margin-bottom: 7px !important
    }

    .clearfix {
        color: #7C8594;
        font-size: 14px;
        letter-spacing: .3px;
        padding-top: 50px;
        padding-bottom: 14px;
    }
</style>